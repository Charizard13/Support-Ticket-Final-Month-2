{"version":3,"sources":["Ticket.js","Search.js","App.js","serviceWorker.js","index.js"],"names":["Ticket","props","useState","ticket","content","slice","setContent","className","type","onClick","e","currentTarget","parentElement","style","display","classList","remove","hideTicket","onHide","title","id","aria-hidden","userEmail","Date","creationTime","toDateString","labels","map","label","i","key","Search","onChange","placeholder","axios","require","App","ticketList","setTicketList","hiddenTicketList","setHiddenTicket","a","forEach","add","hideMe","hiddenList","push","get","params","searchText","value","data","useEffect","length","ticketListLength","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b5c2b81b.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n// import \"bootstrap/dist/css/bootstrap.css\";\r\nimport \"./App.css\";\r\nimport \"./App.scss\";\r\n\r\nexport default function Ticket(props) {\r\n  // const [ticketLength, setTicketLength] = useState(props.ticketListLength);\r\n  // console.log(ticketLength)\r\n  const [content, setContent] = useState(\r\n    props.ticket.content.slice(0, 200) + \"...\"\r\n  );\r\n\r\n  function hideTicket(e) {\r\n    e.currentTarget.parentElement.style.display = \"none\";\r\n    e.currentTarget.parentElement.parentElement.classList.remove(\"ticket\");\r\n    // setTicketLength(ticket=> {\r\n    //   ticket = ticket - 1;\r\n    // })\r\n  }\r\n  function showAllText(e) {\r\n    setContent(props.ticket.content);\r\n    e.currentTarget.style.display = \"none\";\r\n  }\r\n\r\n  // function showAllText(e) {\r\n  //   setContent(props.ticket.content);\r\n  //   e.currentTarget.style.display = \"none\";\r\n  // }\r\n\r\n  return (\r\n    <div className=\"card body ticket \">\r\n      <button\r\n        className=\"card hideTicketButton\"\r\n        type=\"button\"\r\n        onClick={(e) => {\r\n          hideTicket(e);\r\n          props.onHide(e);\r\n        }}\r\n      >\r\n        x\r\n      </button>\r\n      <h5 className=\"card title\">{props.ticket.title}</h5>\r\n\r\n      <p className=\" card-text\">{content}</p>\r\n      <div>\r\n        <div className=\"card-text\" onClick={showAllText} id=\"container\">\r\n          <button className=\"learn-more\">\r\n            <span className=\"circle\" aria-hidden=\"true\">\r\n              <span className=\"icon arrow\"></span>\r\n            </span>\r\n            <span className=\"button-text\">Show more</span>\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <div>\r\n        <span>By </span>\r\n        <span className=\"email\">{props.ticket.userEmail} | </span>\r\n        <span className=\"card\">\r\n          {new Date(props.ticket.creationTime).toDateString()}\r\n        </span>\r\n      </div>\r\n      <div>\r\n        {props.ticket.labels &&\r\n          props.ticket.labels.map((label, i) => {\r\n            if (i === 0) {\r\n              return (\r\n                <span key={i} className=\"label\">\r\n                  {label}\r\n                </span>\r\n              );\r\n            } else {\r\n              return (\r\n                <span key={i} className=\"label\">\r\n                {label}\r\n                </span>\r\n              );\r\n            }\r\n          })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\n// import \"bootstrap/dist/css/bootstrap.css\";\r\nimport \"./App.css\";\r\n\r\nexport default function Search(props) {\r\n  return (\r\n    <div>\r\n      <input id=\"searchInput\"\r\n        onChange={props.onChange}\r\n        placeholder=\"Type Your Ticket Name.....\"\r\n      ></input>\r\n    </div>\r\n  );\r\n}","import React, { useEffect, useState } from 'react';\r\nimport Ticket from './Ticket';\r\nimport Search from './Search';\r\nimport './App.css';\r\n\r\nconst axios = require('axios');\r\n\r\nfunction App() {\r\n  const [ticketList, setTicketList] = useState([]);\r\n  const [hiddenTicketList, setHiddenTicket] = useState([]);\r\n  // const [hiddenTicketText, setHiddenTicketText] = useState(true);\r\n\r\n  useEffect(() => {\r\n    (async function ticketListMaker() {\r\n      const { data } = await axios.get('/api/tickets');\r\n      // console.log(data);\r\n      setTicketList(data);\r\n    }());\r\n  }, []);\r\n\r\n  async function restore() {\r\n    hiddenTicketList.forEach((ticket) => {\r\n      ticket.style.display = 'block';\r\n      ticket.classList.add('ticket');\r\n    });\r\n    setHiddenTicket([])\r\n  }\r\n\r\n  function hideMe(e) {\r\n    const hiddenList = hiddenTicketList.map((ticket) => ticket);\r\n    hiddenList.push(e.currentTarget.parentElement);\r\n    setHiddenTicket(hiddenList);\r\n  }\r\n  async function filteredList(e) {\r\n    const { data } = await axios.get('/api/tickets', {\r\n      params: { searchText: e.currentTarget.value },\r\n    });\r\n    setTicketList(data);\r\n  }\r\n\r\n  return (\r\n    <main>\r\n      <span className=\"results\">\r\n        Showing \r\n        {ticketList.length}\r\n        {'   '}\r\n        results\r\n      </span>\r\n      <span className=\"results\">\r\n        {hiddenTicketList.length > 0 && (\r\n          <span>\r\n            \r\n            <span id=\"hideTicketsCounter\">{hiddenTicketList.length}</span>\r\n            {' '}\r\n            hidden ticket\r\n            {\r\n              (hiddenTicketList.length > 1 && 's',\r\n              (\r\n                <button\r\n                // style={{display: hiddenTicketList.length > 0 ? \"block\" : \"none\"}}\r\n                  type=\"button\"\r\n                  className=\"restoreTicketButton\"\r\n                  id=\"restoreHideTickets\"\r\n                  onClick={restore}\r\n                >\r\n                  restore\r\n                </button>\r\n              ))\r\n            }\r\n            \r\n          </span>\r\n        )}\r\n      </span>\r\n      <div className=\"container\">\r\n        <div>\r\n          <div>\r\n            <Search onChange={filteredList} />\r\n          </div>\r\n          {ticketList.map((ticket, i) => (\r\n            <Ticket\r\n              ticketListLength={ticketList.length}\r\n              key={i}\r\n              ticket={ticket}\r\n              onHide={hideMe}\r\n            />\r\n          ))}\r\n\r\n        </div>\r\n      </div>\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}